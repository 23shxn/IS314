version: '3.8'

services:

  postgres:
    image: postgres:16-alpine
    container_name: rental-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456789}
    ports:
      - "5434:5432"  # host:container, change host port if needed
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rental-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-postgres}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-123456789}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/src/main/resources:/app/resources:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  frontend:
    build:
      context: ./FrontEnd
      dockerfile: Dockerfile
    container_name: rental-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8080
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
